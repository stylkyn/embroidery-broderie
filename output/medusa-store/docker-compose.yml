services:
  medusa_server:
    build:
      context: .
      dockerfile: Dockerfile.backend
    environment:
      MEDUSA_BACKEND_URL: http://localhost:9000
      DISABLE_MEDUSA_ADMIN: false
      MEDUSA_WORKER_MODE: server
    env_file: ".env"
    container_name: medusa_server
    hostname: medusa_server
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./medusa-config.ts:/app/medusa-config.ts
      - ./uploads:/app/uploads
    networks:
      - medusa-network
    extra_hosts:
      - "host.docker.internal:host-gateway"
    ports:
      - 9000:9000
    restart: unless-stopped

  medusa_worker:
    build:
      context: .
      dockerfile: Dockerfile.backend
    environment:
      MEDUSA_BACKEND_URL: http://localhost:9000
      DISABLE_MEDUSA_ADMIN: true
      MEDUSA_WORKER_MODE: worker
    env_file: ".env"
    container_name: medusa_worker
    depends_on:
      medusa_server:
        condition: service_started
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - medusa-network
    command: sh -c "yarn start"
    restart: unless-stopped

  storefront:
    build:
      context: .
      dockerfile: Dockerfile.storefront.prod
      network: host
      args:
        - MEDUSA_BACKEND_URL=http://127.0.0.1:9000
        - NEXT_PUBLIC_MEDUSA_PUBLISHABLE_KEY=
        - EMAIL=admin@example.com
        - PASSWORD=supersecret
    env_file: ".env"
    container_name: storefront
    networks:
      - medusa-network
    depends_on:
      medusa_server:
        condition: service_started
    ports:
      - 8000:8000
    restart: unless-stopped

  postgres:
    image: postgres:17
    hostname: postgres
    restart: always
    container_name: postgres
    env_file: ".env"
    command: >
      -c ssl=on
      -c ssl_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem
      -c ssl_key_file=/etc/ssl/private/ssl-cert-snakeoil.key
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - medusa-network
    expose:
      - 5432
    volumes:
      - db-data:/var/lib/postgresql/data

  redis:
    image: redis:alpine
    hostname: redis
    container_name: redis
    env_file: ".env"
    networks:
      - medusa-network
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s

  
volumes:
  db-data:
  uploads:

networks:
  medusa-network: